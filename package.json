{
  "name": "mesto",
  "version": "0.0.1",
  "description": "### Обзор 1. Разрешение экрана: * Версия для компьютера 1280px; * Переходное значение 680px; * Мобильная версия 320px; 2. HTML, CSS * Секция header состоит из логотипа который меняется при наведении (псевдокласс hover) на черный цвет. * Секция profile сверстана с помощью свойства flex. Кнопки при наведении (псевдокласс hover) становятся прозрачнее с помощью свойства opacity, время анимации задано с помощью свойства transition. При изменении разрешения на 680px и ниже, секция переходит с строчного вида в колонку. * Секция places сверстана с помощью свойства grid и имееет структуру списка. При уменьшении разрешения меняется количество карточек в строку. При 1280px - 3 карточки, 880px - 2 карточки, 680px - 1 карточка. Размер карточки имеет точный размер и не изменяется при разных разрешениях. Карточки добавлены через template. * Секция footer имеет только один параграф. * Чтобы все модальные окна открывались плавно были применены свойство transition с помощью которого можно задать длительность работы и opacity с помощью которого задаётся прозрачность. 3. JavaScript * Создано два класса Card и FormValidator. Класс Card отвечает за создание карточек. Класс FormValidator отвечает за валидацию форм. * При нажатии на кнопку profile__button появляется окошко popup, а при нажатии на крестик окошко скрывается. Это стало возможным с помощью метода addEventListener и метода togglePopup() класса FormValidator в которой добавляется и убирается класс с display:none при клике мышкой по кнопке. * В окошке popup находятся поля ввода (input) при изменении которых происходит изменение текста имени и профессии с помощью свойства textContent. С помощью свойства value мы собираем значения с поля ввода. При отправки формы пользуемся событием submit. * Карточки добавляются JavaScript из массива * При нажатии на кнопку .profile__add-button появляется popup с помощью которого можно добавить новую карточку вводя собственные данные через форму. * Карточки можно лайкать достаточно нажать на сердечко. Это было реализовано при помощи интерфейса event и нажатия обработчика события addEventListener('click'). * Карточку можно удалить нажав на иконку корзины. При нажатии срабатывает обработчик события addEventListener('click') и при помощи метода remove() удаляется нужная карточка. * Нажав на картинку карточки можно отдельно увидеть картинку с названием. Для этого были применены: обработчик события addEventListener('click'), интерфейс event. * Сделана валидация форм с использыванием стандартных браузерных текстов ошибок. * Добавлено закрытие модальных окон с помощью кнопки Esc и нажатия на оверлей.",
  "main": "index.js",
  "scripts": {
    "build": "webpack --mode production",
    "dev": "webpack serve",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d dist"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ninam2013/mesto.git"
  },
  "author": "Eugene Manin",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/ninam2013/mesto/issues"
  },
  "homepage": "https://github.com/ninam2013/mesto#readme",
  "devDependencies": {
    "@babel/core": "^7.17.5",
    "@babel/preset-env": "^7.16.11",
    "autoprefixer": "^10.4.2",
    "babel-loader": "^8.2.3",
    "clean-webpack-plugin": "^4.0.0",
    "css-loader": "^6.7.0",
    "cssnano": "^5.1.0",
    "gh-pages": "^3.2.3",
    "html-webpack-plugin": "^5.5.0",
    "mini-css-extract-plugin": "^2.6.0",
    "postcss-loader": "^6.2.1",
    "webpack": "^5.70.0",
    "webpack-cli": "^4.9.2",
    "webpack-dev-server": "^4.7.4"
  },
  "dependencies": {
    "core-js": "^3.21.1"
  }
}
